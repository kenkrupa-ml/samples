


package com.legstar.test.coxb.custrecord.bind;

import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.test.coxb.custrecord.CustName;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.legstar.test.coxb.custrecord.CustRecord;
import com.legstar.test.coxb.custrecord.ObjectFactory;

/**
 * LegStar Binding for Complex element :
 *   CustRecord.
 * 
 * This class was generated by LegStar Binding generator.
 */
public class CustRecordBinding 
             extends CComplexBinding {

    /** Value object to which this cobol complex element is bound. */
    private CustRecord mValueObject;
  
    /** Indicates that the associated Value object just came from the constructor
     * and doesn't need to be recreated. */
    private boolean mUnusedValueObject = false;
    
    /** Maximum host bytes size for this complex object. */
    private static final int BYTE_LENGTH = 143;
    
    /** Child bound to value object property CustId(Long). */
    public ICobolPackedDecimalBinding _custId;
    /** Child bound to value object property CustName(CustName). */
    public ICobolComplexBinding _custName;
    /** Child bound to value object property StreetAddress(String). */
    public ICobolStringBinding _streetAddress;
    /** Child bound to value object property City(String). */
    public ICobolStringBinding _city;
    /** Child bound to value object property UsState(String). */
    public ICobolStringBinding _usState;
    /** Child bound to value object property OtherStateProvince(String). */
    public ICobolStringBinding _otherStateProvince;
    /** Child bound to value object property CountryCode(String). */
    public ICobolStringBinding _countryCode;
    /** Child bound to value object property PostalCode(String). */
    public ICobolStringBinding _postalCode;
    /** Child bound to value object property Notes(String). */
    public ICobolStringBinding _notes;
            
    /** Logger. */
    private final Log _log = LogFactory.getLog(getClass());

    /** Binding factory. */
    private static final ICobolBindingFactory BF
        = CobolBindingFactory.getBindingFactory();
 
    /** Static reference to Value object factory to be used as default. */
    private static final ObjectFactory JF = new ObjectFactory();
    
    /** Current Value object factory (Defaults to the static one but can be
     *  changed). */
    private ObjectFactory mValueObjectFactory = JF;
    
    /**
     * Constructor for a root Complex element without a bound Value object.
     */
    public CustRecordBinding() {
        this(null);
    }

    /**
     * Constructor for a root Complex element with a bound Value object.
     * 
     * @param valueObject the concrete Value object instance bound to this
     *        complex element
     */
    public CustRecordBinding(
            final CustRecord valueObject) {
        this("", "", null, valueObject);
    }

    /**
    * Constructor for a Complex element as a child of another element and
    * an associated Value object.
    * 
    * @param bindingName the identifier for this binding
    * @param fieldName field name in parent Value object
    * @param valueObject the concrete Value object instance bound to this
    *        complex element
    * @param parentBinding a reference to the parent binding
    */
    public CustRecordBinding(
            final String bindingName,
            final String fieldName,
            final ICobolComplexBinding parentBinding,
            final CustRecord valueObject) {
        
        super(bindingName, fieldName, CustRecord.class, null, parentBinding);
        mValueObject = valueObject;
        if (mValueObject != null) {
            mUnusedValueObject = true;
        }
        initChildren();
        setByteLength(BYTE_LENGTH);
    }

    /** Creates a binding property for each child. */
    private void initChildren() {
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing started");
        }
        /* Create binding children instances */

        _custId = BF.createPackedDecimalBinding("CustId",
               "CustId", Long.class, this);
        _custId.setCobolName("CUST-ID");
        _custId.setByteLength(3);
        _custId.setTotalDigits(5);
        _custName = new CustNameBinding("CustName",
               "CustName", this, null);
        _custName.setCobolName("CUST-NAME");
        _custName.setByteLength(25);
        _streetAddress = BF.createStringBinding("StreetAddress",
               "StreetAddress", String.class, this);
        _streetAddress.setCobolName("STREET-ADDRESS");
        _streetAddress.setByteLength(20);
        _city = BF.createStringBinding("City",
               "City", String.class, this);
        _city.setCobolName("CITY");
        _city.setByteLength(20);
        _usState = BF.createStringBinding("UsState",
               "UsState", String.class, this);
        _usState.setCobolName("US-STATE");
        _usState.setByteLength(2);
        _otherStateProvince = BF.createStringBinding("OtherStateProvince",
               "OtherStateProvince", String.class, this);
        _otherStateProvince.setCobolName("OTHER-STATE-PROVINCE");
        _otherStateProvince.setByteLength(20);
        _countryCode = BF.createStringBinding("CountryCode",
               "CountryCode", String.class, this);
        _countryCode.setCobolName("COUNTRY-CODE");
        _countryCode.setByteLength(3);
        _postalCode = BF.createStringBinding("PostalCode",
               "PostalCode", String.class, this);
        _postalCode.setCobolName("POSTAL-CODE");
        _postalCode.setByteLength(10);
        _notes = BF.createStringBinding("Notes",
               "Notes", String.class, this);
        _notes.setCobolName("NOTES");
        _notes.setByteLength(40);

        /* Add children to children list */
        getChildrenList().add(_custId);
        getChildrenList().add(_custName);
        getChildrenList().add(_streetAddress);
        getChildrenList().add(_city);
        getChildrenList().add(_usState);
        getChildrenList().add(_otherStateProvince);
        getChildrenList().add(_countryCode);
        getChildrenList().add(_postalCode);
        getChildrenList().add(_notes);
 
        if (_log.isDebugEnabled()) {
            _log.debug("Initializing successful");
        }
    }
    
    /** {@inheritDoc} */
    public void createValueObject() throws HostException {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
        if (mUnusedValueObject && mValueObject != null) {
            mUnusedValueObject = false;
            return;
        }
        mValueObject = mValueObjectFactory.createCustRecord();
    }

    /** {@inheritDoc} */
    public void setChildrenValues() throws HostException {

         /* Make sure there is an associated Value object*/
        if (mValueObject == null) {
            createValueObject();
        }
        /* Get Value object property _custId */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_custId"
                    + " value=" + mValueObject.getCustId());
        }
        _custId.setObjectValue(mValueObject.getCustId());
        /* Get Value object property _custName */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_custName"
                    + " value=" + mValueObject.getCustName());
        }
        _custName.setObjectValue(mValueObject.getCustName());
        /* Get Value object property _streetAddress */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_streetAddress"
                    + " value=" + mValueObject.getStreetAddress());
        }
        _streetAddress.setObjectValue(mValueObject.getStreetAddress());
        /* Get Value object property _city */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_city"
                    + " value=" + mValueObject.getCity());
        }
        _city.setObjectValue(mValueObject.getCity());
        /* Get Value object property _usState */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_usState"
                    + " value=" + mValueObject.getUsState());
        }
        _usState.setObjectValue(mValueObject.getUsState());
        /* Get Value object property _otherStateProvince */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_otherStateProvince"
                    + " value=" + mValueObject.getOtherStateProvince());
        }
        _otherStateProvince.setObjectValue(mValueObject.getOtherStateProvince());
        /* Get Value object property _countryCode */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_countryCode"
                    + " value=" + mValueObject.getCountryCode());
        }
        _countryCode.setObjectValue(mValueObject.getCountryCode());
        /* Get Value object property _postalCode */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_postalCode"
                    + " value=" + mValueObject.getPostalCode());
        }
        _postalCode.setObjectValue(mValueObject.getPostalCode());
        /* Get Value object property _notes */
        if (_log.isDebugEnabled()) {
            _log.debug("Getting value from Value object property "
                    + "_notes"
                    + " value=" + mValueObject.getNotes());
        }
        _notes.setObjectValue(mValueObject.getNotes());
     }

    /** {@inheritDoc} */
    public void setPropertyValue(final int index) throws HostException {
 
        ICobolBinding child = getChildrenList().get(index);
        
       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
        if (!child.isBound()) {
            return;
        }
        
        /* Set the Value object property value from binding object */
        Object bindingValue = null;
        switch (index) {
        case 0:
            bindingValue = child.getObjectValue(Long.class);
            mValueObject.setCustId((Long) bindingValue);
            break;
        case 1:
            bindingValue = child.getObjectValue(CustName.class);
            mValueObject.setCustName((CustName) bindingValue);
            break;
        case 2:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setStreetAddress((String) bindingValue);
            break;
        case 3:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setCity((String) bindingValue);
            break;
        case 4:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setUsState((String) bindingValue);
            break;
        case 5:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setOtherStateProvince((String) bindingValue);
            break;
        case 6:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setCountryCode((String) bindingValue);
            break;
        case 7:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setPostalCode((String) bindingValue);
            break;
        case 8:
            bindingValue = child.getObjectValue(String.class);
            mValueObject.setNotes((String) bindingValue);
            break;
         default:
            break;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("Setting value of Value object property "
                    + child.getJaxbName()
                    + " value=" + bindingValue);
        }
    }

    /** {@inheritDoc} */
    public Object getObjectValue(
            final Class < ? > type) throws HostException {
        if (type.equals(CustRecord.class)) {
            return mValueObject;
        } else {
            throw new HostException("Attempt to get binding " + getBindingName()
                    + " as an incompatible type " + type);
        }
    }

    /** {@inheritDoc} */
    public void setObjectValue(
            final Object bindingValue) throws HostException {
        if (bindingValue == null) {
            mValueObject = null;
            return;
        }
        if (bindingValue.getClass().equals(CustRecord.class)) {
            mValueObject = (CustRecord) bindingValue;
        } else {
            throw new HostException("Attempt to set binding " + getBindingName()
                    + " from an incompatible value " + bindingValue);
        }
    }

    /**
     * @return the java object factory for objects creation
     */
    public ObjectFactory getObjectFactory() {
        return mValueObjectFactory;
    }

    /**
     * @param valueObjectFactory the java object factory for objects creation 
     */
    public void setObjectFactory(final Object valueObjectFactory) {
        mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

    /** {@inheritDoc} */
    public boolean isSet() {
        return (mValueObject != null);
    }

    /**
     * @return the bound Value object
     */
    public CustRecord getCustRecord() {
        return mValueObject;
    }
    
    /**
     * The COBOL complex element maximum length in bytes.
     * 
     * @return COBOL complex element maximum length in bytes
     */
    public int getByteLength() {
        return BYTE_LENGTH;
    }
}

